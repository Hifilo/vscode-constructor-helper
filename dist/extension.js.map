{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,0FCtBA,eAEA,oBAAyBQ,GACrB,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,+BAA+B,KAC5E,MAAMC,EAASH,EAAOI,OAAOC,iBAC7B,GAAIF,EAAQ,CACR,MAAMG,EAAWH,EAAOG,SAClBC,EAAYJ,EAAOI,UASnBC,EAROF,EAASG,QAAQF,GACVG,MAAM,KAEMC,KAAKC,IACjC,MAAMC,EAAeD,EAAME,OAC3B,MAAO,QAAQD,OAAkBA,IAAe,IAGZE,KAAK,MAE7CZ,EAAOa,MAAKC,IACR,MAAMC,EAAsBX,EAAUY,OAChCC,EAAkBd,EAASe,OAAOH,EAAoBI,MAG5D,GAAIF,EAAgBG,KAAKT,OAAOU,WAAW,eAAgB,CACvD,MAAMC,EAAmBL,EAAgBM,MACnCC,EAAmBrB,EAASe,OAAOI,EAAiBG,IAAIN,KAAO,GAC/DO,EAAgB,IAAI7B,EAAO8B,SAASH,EAAiBI,WAAY,GAEjEC,EAAqB,KAAKxB,MAEhCS,EAAYgB,OAAOJ,EAAeG,E,SAMlDlC,EAAQoC,cAAcC,KAAKpC,EAC/B,C","sources":["webpack://constructor-helper/external commonjs \"vscode\"","webpack://constructor-helper/webpack/bootstrap","webpack://constructor-helper/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    let disposable = vscode.commands.registerCommand('extension.constructorHelper', () => {\n        const editor = vscode.window.activeTextEditor;\n        if (editor) {\n            const document = editor.document;\n            const selection = editor.selection;\n            const text = document.getText(selection);\n            const params = text.split(',');\n\n            const refactoredParams = params.map((param) => {\n                const trimmedParam = param.trim();\n                return `this.${trimmedParam} = ${trimmedParam};`;\n            });\n\n            const refactoredText = refactoredParams.join('\\n');\n\n            editor.edit(editBuilder => {\n                const constructorPosition = selection.active;\n                const constructorLine = document.lineAt(constructorPosition.line);\n\n                // Check if the constructor is already defined\n                if (constructorLine.text.trim().startsWith('constructor')) {\n                    const constructorRange = constructorLine.range;\n                    const openingBraceLine = document.lineAt(constructorRange.end.line + 1);\n                    const startPosition = new vscode.Position(openingBraceLine.lineNumber, 0);\n\n                    const newConstructorText = `\\n${refactoredText}\\n`;\n\n                    editBuilder.insert(startPosition, newConstructorText);\n                }\n            });\n        }\n    });\n\n    context.subscriptions.push(disposable);\n}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","disposable","vscode","commands","registerCommand","editor","window","activeTextEditor","document","selection","refactoredText","getText","split","map","param","trimmedParam","trim","join","edit","editBuilder","constructorPosition","active","constructorLine","lineAt","line","text","startsWith","constructorRange","range","openingBraceLine","end","startPosition","Position","lineNumber","newConstructorText","insert","subscriptions","push"],"sourceRoot":""}